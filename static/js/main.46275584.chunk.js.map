{"version":3,"sources":["assets/construction.png","assets/ggTavern.png","app/shared/components/UnderConstruction.tsx","app/core/NavbarStyles.ts","app/core/NavbarComponent.tsx","app/theme.ts","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","container","textAlign","fontFamily","UnderConstructionComponent","props","classes","className","title","id","width","alt","src","img","navbarStyles","theme","root","display","padding","backgroundColor","height","minHeight","justifyContent","zIndex","float","marginRight","navLink","color","textDecoration","marginTop","marginBottom","marginLeft","active","palette","primary","main","NavbarComponent","to","logo","IconButton","activeClassName","component","NavLink","Button","darkTheme","createMuiTheme","secondary","type","overrides","App","history","createBrowserHistory","basename","process","ThemeProvider","CssBaseline","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,sKCIrCC,EAAYC,YAAW,CAC3BC,UAAW,CACTC,UAAW,SACXC,WAAY,sBAID,SAASC,EAA2BC,GACjD,IAAMC,EAAUP,IAChB,OACE,yBAAKQ,UAAWD,EAAQL,WACtB,mCAAKI,QAAL,IAAKA,OAAL,EAAKA,EAAOG,OACZ,0EACA,yBACEC,GAAG,uBACHC,MAAM,MACNC,IAAI,qBACJC,IAAKC,O,8DCeEC,EAlCMd,aAAW,SAAAe,GAAK,MAAK,CACtCC,KAAM,CACFN,MAAO,OACPO,QAAS,OACTC,QAAS,WACTC,gBAAiB,OACjBC,OAAQ,OACRC,UAAW,OACXC,eAAgB,UAChBC,OAAQ,MAEZV,IAAK,CACDO,OAAQ,OACRV,MAAO,OACPc,MAAO,OACPP,QAAS,QACTQ,YAAa,OAGjBC,QAAS,CACLP,gBAAiB,cACjBQ,MAAO,UACPzB,UAAW,SACX0B,eAAgB,OAChBC,UAAW,OACXC,aAAc,OACdC,WAAY,SAEhBC,OAAQ,CACJb,gBAAiBJ,EAAMkB,QAAQC,QAAQC,KACvCR,MAAO,aCKAS,MA7Bf,WACE,IAAM9B,EAAUP,IAChB,OACE,yBAAKQ,UAAWD,EAAQU,MACtB,kBAAC,IAAD,CAAMqB,GAAG,QAAQ5B,GAAG,aAClB,yBACEA,GAAG,SACHG,IAAK0B,IACL3B,IAAI,gBACJJ,UAAWD,EAAQO,OAEvB,kBAAC0B,EAAA,EAAD,CACEF,GAAG,QACH9B,UAAWD,EAAQoB,QACnBc,gBAAiBlC,EAAQ0B,OACzBS,UAAWC,KACX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACEN,GAAG,SACH9B,UAAWD,EAAQoB,QACnBc,gBAAiBlC,EAAQ0B,OACzBS,UAAWC,KAJb,c,wBCxBOE,EAAYC,YAAe,CACtCZ,QAAS,CACPC,QAAS,CACPC,KAAM,WAERW,UAAW,CACTX,KAAM,WAERY,KAAM,QAERC,UAAW,K,cCgBEC,MAnBf,WACE,IAAMC,EAAUC,YAAqB,CAAEC,SAAUC,wBACjD,OACE,kBAACC,EAAA,EAAD,CAAevC,MAAO6B,GACpB,kBAACW,EAAA,EAAD,MACA,kBAAC,IAAD,CAAQL,QAASA,GACf,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOM,KAAK,SACV,kBAAC,EAAD,CAAmBhD,MAAM,mCAE3B,kBAAC,IAAD,CAAOgD,KAAK,UACV,kBAAC,EAAD,CAAmBhD,MAAM,cAE3B,kBAAC,IAAD,CAAUiD,OAAK,EAACD,KAAK,IAAInB,GAAG,aCVhBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46275584.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/construction.c28113ab.png\";","module.exports = __webpack_public_path__ + \"static/media/ggTavern.f8b7f62b.png\";","import React from 'react';\nimport img from 'assets/construction.png';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  container: {\n    textAlign: 'center',\n    fontFamily: '\"Press Start 2P\"',\n  },\n});\n\nexport default function UnderConstructionComponent(props: { title?: string }) {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <h2>{props?.title}</h2>\n      <h3>This page is currently under construction.</h3>\n      <img\n        id='imgUnderConstruction'\n        width='300'\n        alt='Under Construction'\n        src={img}\n      />\n    </div>\n  );\n}\n","import { makeStyles } from '@material-ui/core';\n\nconst navbarStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        display: 'flex',\n        padding: '5px 10px',\n        backgroundColor: '#333',\n        height: 'auto',\n        minHeight: 'auto',\n        justifyContent: 'initial',\n        zIndex: 1500\n    },\n    img: {\n        height: 'auto',\n        width: '55px',\n        float: 'left',\n        display: 'block',\n        marginRight: '1em',\n\n    },\n    navLink: {\n        backgroundColor: 'transparent',\n        color: '#f2f2f2',\n        textAlign: 'center',\n        textDecoration: 'none',\n        marginTop: 'auto',\n        marginBottom: 'auto',\n        marginLeft: '0.5em',\n    },\n    active: {\n        backgroundColor: theme.palette.primary.main,\n        color: 'white',\n    }\n}));\n\nexport default navbarStyles;\n","import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport logo from 'assets/ggTavern.png';\nimport { Button, IconButton } from '@material-ui/core';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport useStyles from './NavbarStyles';\n\nfunction NavbarComponent() {\n  const classes = useStyles();\n  return (\n    <nav className={classes.root}>\n      <Link to='/home' id='homeImage'>\n        <img\n          id='gg-img'\n          src={logo}\n          alt='ggtavern-logo'\n          className={classes.img}></img>\n      </Link>\n      <IconButton\n        to='/home'\n        className={classes.navLink}\n        activeClassName={classes.active}\n        component={NavLink}>\n        <HomeIcon />\n      </IconButton>\n      <Button\n        to='/about'\n        className={classes.navLink}\n        activeClassName={classes.active}\n        component={NavLink}>\n        About Us\n      </Button>\n    </nav>\n  );\n}\n\nexport default NavbarComponent;\n","import { createMuiTheme } from '@material-ui/core';\n\nexport const darkTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#9d6c33',\n    },\n    secondary: {\n      main: '#7baf5b',\n    },\n    type: 'dark',\n  },\n  overrides: {},\n});\n","import React from 'react';\nimport UnderConstruction from 'app/shared/components/UnderConstruction';\nimport NavbarComponent from 'app/core/NavbarComponent';\n\nimport { ThemeProvider, CssBaseline } from '@material-ui/core';\nimport { darkTheme } from './theme';\nimport { Router, Route, Redirect } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\nfunction App() {\n  const history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <Router history={history}>\n        <NavbarComponent />\n        <Route path='/home'>\n          <UnderConstruction title='Grinning Goblin Gaming Tavern'></UnderConstruction>\n        </Route>\n        <Route path='/about'>\n          <UnderConstruction title='About Us'></UnderConstruction>\n        </Route>\n        <Redirect exact path='/' to='/home' />\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}